version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: newsagent-postgres
    environment:
      POSTGRES_DB: newsdb
      POSTGRES_USER: newsuser
      POSTGRES_PASSWORD: newspass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - newsagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newsuser -d newsdb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: newsagent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - newsagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: newsagent-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://newsuser:newspass@postgres:5432/newsdb
      - CHROMA_PERSIST_DIR=/app/chroma_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - chroma_data:/app/chroma_db
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - newsagent-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Starting FastAPI server...' &&
        uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: newsagent-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - newsagent-network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: newsagent-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - newsagent-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local

networks:
  newsagent-network:
    driver: bridge